using System;

using CMS.Base;
using CMS.DocumentEngine;
using CMS.Helpers;

using Kentico.Content.Web.Mvc;
using Kentico.Web.Mvc;

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.Routing;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Razor.TagHelpers;
using Microsoft.AspNetCore.Routing;

namespace DancingGoat.Helpers
{
    public class CultureLinkTagHelper : TagHelper
    {
        private readonly IHttpContextAccessor httpContextAccessor;
        private readonly IPageDataContextRetriever pageDataContextRetriever;
        private readonly IUrlHelperFactory urlHelperFactory;
        private readonly IActionContextAccessor actionContextAccessor;
        private readonly IHtmlGenerator htmlGenerator;
        private readonly ISiteService siteService;

        public string LinkText { get; set; }


        public string CultureName { get; set; }


        [ViewContext]
        [HtmlAttributeNotBound]
        public ViewContext ViewContext { get; set; }


        public CultureLinkTagHelper(IHttpContextAccessor httpContextAccessor, IPageDataContextRetriever pageDataContextRetriever, IUrlHelperFactory urlHelperFactory, IActionContextAccessor actionContextAccessor, IHtmlGenerator htmlGenerator, ISiteService siteService)
        {
            this.httpContextAccessor = httpContextAccessor;
            this.pageDataContextRetriever = pageDataContextRetriever;
            this.urlHelperFactory = urlHelperFactory;
            this.actionContextAccessor = actionContextAccessor;
            this.htmlGenerator = htmlGenerator;
            this.siteService = siteService;
        }


        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            // Page data context is initialized
            if (pageDataContextRetriever.TryRetrieve<TreeNode>(out var _))
            {
                var urlHelper = urlHelperFactory.GetUrlHelper(actionContextAccessor.ActionContext);

                var url = urlHelper.Kentico().CurrentPageUrl(CultureName).ToAbsolute();

                CreateActionLinkWithHref(output, url);
                return;
            }

            var httpContext = httpContextAccessor.HttpContext;

            var originalRouteValues = httpContext.Request.RouteValues;

            // Create a link for the current culture (the URL stays as it is)
            if ((string)originalRouteValues["culture"] == CultureName)
            {
                var url = UriHelper.GetEncodedUrl(httpContext.Request);
                CreateActionLinkWithHref(output, url);
                return;
            }

            // Clone the original route information
            var newRouteValues = new RouteValueDictionary(originalRouteValues);            

            var queryParams = httpContext.Request.Query;

            // Add query parameters (e.g. when performing a search)
            foreach (var queryParam in queryParams)
            {
                var key = queryParam.Key;

                if (!string.IsNullOrEmpty(key))
                {
                    newRouteValues[key] = queryParams[key];
                }
            }

            output.TagName = null;
            var actionLink = GenerateActionLink(newRouteValues);
            output.Content.SetHtmlContent(actionLink);
        }


        private void CreateActionLinkWithHref(TagHelperOutput output, string url)
        {
            output.TagName = "a";
            output.Attributes.Add("href", url);
            output.TagMode = TagMode.StartTagAndEndTag;
            output.Content.SetContent(LinkText);
        }


        private TagBuilder GenerateActionLink(RouteValueDictionary routeValues)
        {
            // Link for default culture needs to be generated by route name in order to not put culture into query string
            if (string.Equals(CultureName, CultureHelper.GetDefaultCultureCode(siteService.CurrentSite.SiteName), StringComparison.InvariantCultureIgnoreCase))
            {
                routeValues.Remove("culture");
                return htmlGenerator.GenerateRouteLink(ViewContext, LinkText, Startup.DEFAULT_WITHOUT_LANGUAGE_PREFIX_ROUTE_NAME, null, null, null, routeValues, null);
            }
            
            // Ensure correct culture prefix
            routeValues["culture"] = CultureName;
            return htmlGenerator.GenerateActionLink(ViewContext, LinkText, null, null, null, null, null, routeValues, null);            
        }
    }
}
